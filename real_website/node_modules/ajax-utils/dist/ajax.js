"use strict";
var Q = require('q');
var _ = require('lodash');
var REQUEST_ID = 1;
(function (Transform) {
    Transform[Transform["None"] = 0] = "None";
    Transform[Transform["CamelCaseToUnderscore"] = 1] = "CamelCaseToUnderscore";
    Transform[Transform["UnderscoreToCamelCase"] = 2] = "UnderscoreToCamelCase";
})(exports.Transform || (exports.Transform = {}));
var Transform = exports.Transform;
var Request = (function () {
    function Request(method, url, urlParams) {
        this.method = method;
        this.url = url;
        this.headers = {};
        this.urlParams = urlParams;
        this.id = REQUEST_ID++;
    }
    Request.prototype.send = function () {
        var _this = this;
        var url = this.url;
        if (!url) {
            throw "invalid url";
        }
        if (this.urlParams) {
            for (var key in this.urlParams) {
                if (this.urlParams.hasOwnProperty(key)) {
                    var regex = new RegExp(':{?' + key + '(}|$|\\b)', 'i');
                    url = url.replace(regex, this.urlParams[key].toString());
                }
            }
        }
        if (this.queryParams) {
            var params = [];
            for (var key in this.queryParams) {
                if (this.queryParams.hasOwnProperty(key)) {
                    var value = this.queryParams[key];
                    params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
                }
            }
            url = url + '?' + params.join('&');
        }
        if (this.bodyJSON) {
            switch (this.transform) {
                case Transform.CamelCaseToUnderscore:
                    this.bodyJSON = underscoreKeys(this.bodyJSON);
                    break;
                case Transform.UnderscoreToCamelCase:
                    this.bodyJSON = camelizeKeys(this.bodyJSON);
                    break;
                default:
                    break;
            }
            this.headers['Content-Type'] = 'application/json';
            this.body = JSON.stringify(this.bodyJSON);
        }
        this.headers['X-Requested-With'] = 'XMLHttpRequest';
        var defer = Q.defer();
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
                var response = new Response(_this, xhr);
                if ((xhr.status >= 200 && xhr.status < 300) ||
                    (xhr.status < 100 && xhr.responseText && xhr.responseText.length > 0)) {
                    defer.resolve(response);
                }
                else {
                    defer.reject(response);
                }
            }
        };
        if (this.uploadProgressCallback) {
            xhr.upload.onprogress = this.uploadProgressCallback;
        }
        if (this.downloadProgressCallback) {
            xhr.onprogress = this.downloadProgressCallback;
        }
        xhr.open(this.method.toUpperCase(), url, true);
        for (var k in this.headers) {
            if (this.headers.hasOwnProperty(k)) {
                xhr.setRequestHeader(k, this.headers[k]);
            }
        }
        var csrf;
        if (typeof document !== 'undefined') {
            csrf = document.querySelector("meta[name='csrf-token']");
        }
        if (url.length > 1 && !url.match('^http://|^//|^https://') &&
            csrf && csrf.hasAttribute('content')) {
            xhr.setRequestHeader('X-CSRF-Token', csrf.getAttribute('content'));
        }
        if (this.arrayBuffer) {
            xhr.responseType = 'arraybuffer';
        }
        xhr.send(this.body);
        return defer.promise;
    };
    return Request;
}());
exports.Request = Request;
var Response = (function () {
    function Response(request, xhr) {
        this.id = request.id;
        this.xhr = xhr;
        this.status = this.xhr.status;
        if (request.arrayBuffer) {
            this.bodyData = xhr.response;
            return;
        }
        this.body = this.xhr.responseText;
        var contentType = this.xhr.getResponseHeader('Content-Type');
        if (((!contentType || contentType.indexOf("text/plain") >= 0) && _.endsWith(request.url, '.json')) ||
            (contentType && contentType.indexOf('application/json') >= 0)) {
            try {
                this.bodyJSON = JSON.parse(this.body);
            }
            catch (e) { }
        }
        else if ((!contentType && _.endsWith(request.url, '.xml')) ||
            (contentType && contentType.indexOf('text/xml') >= 0)) {
            this.bodyXML = xhr.responseXML;
        }
        if (request.applyReverseTransformToResponse) {
            switch (request.transform) {
                case Transform.CamelCaseToUnderscore:
                    this.transform = Transform.UnderscoreToCamelCase;
                    if (this.bodyJSON) {
                        this.bodyJSON = camelizeKeys(this.bodyJSON);
                    }
                    break;
                case Transform.UnderscoreToCamelCase:
                    this.transform = Transform.CamelCaseToUnderscore;
                    if (this.bodyJSON) {
                        this.bodyJSON = underscoreKeys(this.bodyJSON);
                    }
                    break;
                default:
                    break;
            }
        }
    }
    Response.prototype.toString = function () {
        return "[" + this.status + ':"' + this.body + '"]';
    };
    return Response;
}());
exports.Response = Response;
function transformKeys(value, transform) {
    var result;
    if (_.isArray(value)) {
        result = [];
        value.forEach(function (item) {
            result.push(transformKeys(item, transform));
        });
    }
    else if (_.isPlainObject(value)) {
        result = {};
        Object.keys(value).forEach(function (key) {
            var item = value[key];
            if (_.isString(key)) {
                key = transform(key);
            }
            result[key] = transformKeys(item, transform);
        });
    }
    else {
        result = value;
    }
    return result;
}
function camelize(str, capitalize) {
    var result = [];
    var count = 0;
    str.split('_').forEach(function (word) {
        if (word.length < 1) {
            return;
        }
        var word = word, first = word.charAt(0);
        if (capitalize || count > 0) {
            first = first.toUpperCase();
        }
        result.push(first + word.slice(1));
        count++;
    });
    return result.join('');
}
function underscore(str) {
    var result = [];
    var words = str.split(/(?=[A-Z])/);
    var acc = null;
    for (var i = 0; i < words.length; i++) {
        var word = words[i].toLowerCase();
        if (word.length === 1) {
            if (acc) {
                acc += word;
            }
            else {
                acc = word;
            }
        }
        else {
            if (acc) {
                result.push(acc);
                acc = null;
            }
            result.push(word);
        }
    }
    if (acc) {
        result.push(acc);
        acc = null;
    }
    return result.join('_');
}
function camelizeKeys(value) {
    if (_.isString(value)) {
        return camelize(value);
    }
    else {
        return transformKeys(value, camelize);
    }
}
exports.camelizeKeys = camelizeKeys;
function underscoreKeys(value) {
    if (_.isString(value)) {
        return underscore(value);
    }
    else {
        return transformKeys(value, underscore);
    }
}
exports.underscoreKeys = underscoreKeys;
//# sourceMappingURL=ajax.js.map