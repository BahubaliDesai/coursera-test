import * as Q from 'q';
export declare enum Transform {
    None = 0,
    CamelCaseToUnderscore = 1,
    UnderscoreToCamelCase = 2,
}
export declare class Request {
    id: number;
    method: string;
    url: string;
    urlParams: any;
    queryParams: any;
    headers: any;
    bodyJSON: any;
    body: string | Blob | FormData;
    uploadProgressCallback: (ev: ProgressEvent) => any;
    downloadProgressCallback: (ev: ProgressEvent) => any;
    transform: Transform;
    applyReverseTransformToResponse: boolean;
    arrayBuffer: boolean;
    constructor(method: string, url: string, urlParams?: any);
    send(): Q.Promise<{}>;
}
export declare class Response {
    id: number;
    xhr: XMLHttpRequest;
    bodyJSON: any;
    bodyXML: any;
    body: string;
    bodyData: ArrayBuffer;
    status: number;
    transform: Transform;
    constructor(request: Request, xhr: XMLHttpRequest);
    toString(): string;
}
export declare function camelizeKeys(value: string | Array<any> | Object): any;
export declare function underscoreKeys(value: string | Array<any> | Object): any;
